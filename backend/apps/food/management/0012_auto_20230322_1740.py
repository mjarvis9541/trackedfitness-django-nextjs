# Generated by Django 4.1.7 on 2023-03-22 17:40
import uuid

from django.db import migrations

models_dict = {
    "food": {"Food": "brand"},
}


def fill_uuid(apps, schema_editor):
    Model1 = apps.get_model("food", "Brand")
    for obj in Model1.objects.all():
        old_obj_id = obj.id

        # it creates new object as in the previous example
        obj.id = uuid.uuid4()
        obj.save()

        # So, if we do not need to store objects with old integer ids we have to delete them.
        Model1.objects.filter(id=old_obj_id).first().delete()

        for app, subdict in models_dict.items():  # new
            for model, field in subdict.items():  # new
                Model = apps.get_model(app, model)  # new
                model_obj = Model.objects.filter(**{field: old_obj_id}).first()  # new
                setattr(model_obj, field, obj)  # new
                model_obj.save(update_fields=[field])  # new


class Migration(migrations.Migration):

    dependencies = [
        ("food", "0010_alter_brand_id"),
    ]

    operations = [
        migrations.RunPython(
            fill_uuid,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
